#include <Luau/Compiler.h>
#include <Luau/BytecodeBuilder.h>

#include <zstd/xxhash.h>
#include <zstd/zstd.h>

#include "Rlapi.h"

class Execution {
private:
    class bytecode_encoder_t : public Luau::BytecodeEncoder {
        uint8_t encodeOp(const uint8_t opcode) {
            return opcode * 227;
        }
    } enc;

    std::string compress(const std::string& data) {
        std::string output = "RSB1";
        std::size_t dataSize = data.size();
        std::size_t maxSize = ZSTD_compressBound(dataSize);
        std::vector<char> compressed(maxSize);
        std::size_t compSize = ZSTD_compress(&compressed[0], maxSize, data.c_str(), dataSize, ZSTD_maxCLevel());
        output.append(reinterpret_cast<char*>(&dataSize), sizeof(dataSize));
        output.append(&compressed[0], compSize);
        uint32_t firstHash = XXH32(&output[0], output.size(), 42U);
        uint8_t hashedBytes[4];
        std::memcpy(hashedBytes, &firstHash, sizeof(firstHash));
        for (std::size_t i = 0; i < output.size(); ++i)
            output[i] ^= hashedBytes[i % 4] + i * 41U;
        return output;
    }

public:
    void Execute_Bytecode(uintptr_t rl, std::string bytecode) {
        std::string compressed_bytecode = compress(bytecode);

        Addresses::r_luavm_load(rl, &compressed_bytecode, "slxp", NULL);
        Addresses::r_taskdefer(rl);

        Offsets::lua_State::decrementTop(rl);// decrementing top to make the stack return to normal and so other scripts can run properly
    }

    void Execute_Script(uintptr_t rl, std::string script) {
        std::string bytecode = Luau::compile("spawn(function() " + script + " end)", {}, {}, &enc);

        if (bytecode.at(0) != 0)
            Execute_Bytecode(rl, bytecode);
        else
            Addresses::r_print(3, bytecode.c_str() + 1);
    }
};