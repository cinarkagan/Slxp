#include "Execution.h"

uintptr_t luaState;
class LuaState {
private: 
	int getJobByName(std::string job_name) {
		auto job_return = NULL;
		auto job_start = *reinterpret_cast<uintptr_t*>(Addresses::r_getscheduler() + 308);
		auto job_end = *reinterpret_cast<uintptr_t*>(Addresses::r_getscheduler() + 312);

		while (job_start != job_end) {
			if (*reinterpret_cast<std::string*>(*reinterpret_cast<uintptr_t*>(job_start) + 16) == job_name) {
				job_return = *reinterpret_cast<uintptr_t*>(job_start);
				break;
			}
			job_start += 8;
		}
		return job_return;
	}

public:
	int getScriptContext() {
		return *reinterpret_cast<uintptr_t*>(getJobByName("WaitingHybridScriptsJob") + 304);
	}
};


class Roblox {
private:
	uintptr_t luaM_newgco(uintptr_t rl, size_t nsize, uint8_t memcat) {
		uintptr_t global = Offsets::global_State::global(rl);

		auto frealloc = *reinterpret_cast<uintptr_t(__cdecl**)(uintptr_t, uintptr_t, uintptr_t, size_t)>(global + Offsets::global_State::frealloc);
		auto block = frealloc(*reinterpret_cast<uintptr_t*>(global + Offsets::global_State::userdata), NULL, NULL, nsize);

		*reinterpret_cast<size_t*>(global + Offsets::global_State::totalbytes) += nsize;
		*reinterpret_cast<size_t*>(global + Offsets::global_State::memcatbytes + (4 * memcat)) += nsize;

		return block;
	}

	void luaC_Init(uintptr_t rl, uintptr_t closure, uintptr_t ttype) {
		uintptr_t global = Offsets::global_State::global(rl);

		*reinterpret_cast<uint8_t*>(closure + Offsets::gch::marked) = *reinterpret_cast<uint8_t*>(global + Offsets::global_State::currentwhite) & Offsets::Closure::isC;
		*reinterpret_cast<uint8_t*>(closure + Offsets::gch::tt) = ttype;
		*reinterpret_cast<uint8_t*>(closure + Offsets::gch::memcat) = *reinterpret_cast<uintptr_t*>(rl + Offsets::lua_State::activememcat);
	}
public:
	void lua_pushcclosure(uintptr_t rl, uintptr_t fn, const char* debugname, int nups) {
		auto global = Offsets::global_State::global(rl);
		auto closure = luaM_newgco(rl, Offsets::Closure::C::upvals + (16 * nups), *reinterpret_cast<uint8_t*>(rl + Offsets::lua_State::activememcat));

		luaC_Init(rl, closure, 7);// 7 = LUA_CFUNCTION, DONT CHANGE !!!!!!

		*reinterpret_cast<uint8_t*>(closure + Offsets::Closure::isC) = 0x140001;
		*reinterpret_cast<uint8_t*>(closure + Offsets::Closure::env) = *reinterpret_cast<uintptr_t*>(rl + Offsets::lua_State::env);

		Offsets::Closure::C::set_function(rl, closure, fn);
		Offsets::Closure::C::set_continuation(rl, closure, NULL);//idk why just keep it null
		Offsets::Closure::C::set_debugname(rl, closure, debugname);

		auto top = *reinterpret_cast<uintptr_t*>(rl + Offsets::lua_State::top);
		top = closure;
		*reinterpret_cast<uintptr_t*>(top + 12) = 7;
		Offsets::lua_State::incrementTop(rl);
	}
};

namespace Misc {
	void setlevel(uintptr_t rl, int identity) {
		*reinterpret_cast<uintptr_t*>((rl + Offsets::lua_State::extraSpace) + Offsets::extra_Space::identity) = identity;
	}

	void setfps(double fps) {
		*reinterpret_cast<double*>(Addresses::r_getscheduler() + 280) = 1 / fps;
	}
}