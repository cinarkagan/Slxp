#include "Execution.h"
#include "Console.h"

uintptr_t luaState;
class LuaState {
private: 
	int getJobByName(std::string job_name) {
		print(Colors::Pink, "Getting Task Scheduler...\n");

		auto job_return = NULL;
		auto job_start = *reinterpret_cast<uintptr_t*>(Addresses::r_getscheduler() + 308);
		auto job_end = *reinterpret_cast<uintptr_t*>(Addresses::r_getscheduler() + 312);

		while (job_start != job_end) {
			if (*reinterpret_cast<std::string*>(*reinterpret_cast<uintptr_t*>(job_start) + 16) == job_name) {
				job_return = *reinterpret_cast<uintptr_t*>(job_start);
				break;
			}
			job_start += 8;
		}

		print(Colors::Yellow, "Getting exploit ready for execution...\n");
		return job_return;
	}

public:
	int getScriptContext() {
		return *reinterpret_cast<uintptr_t*>(getJobByName("WaitingHybridScriptsJob") + 304);
	}
};

namespace Misc {
	void setlevel(uintptr_t rl, int identity) {
		*reinterpret_cast<uintptr_t*>((rl + Offsets::lua_State::extraSpace) + Offsets::extra_Space::identity) = identity;
	}

	void setfps(double fps) {
		*reinterpret_cast<double*>(Addresses::r_getscheduler() + 280) = 1 / fps;
	}
}