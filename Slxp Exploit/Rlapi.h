#pragma once

#include <Windows.h>
#include <iostream>

const uintptr_t base = reinterpret_cast<uintptr_t>(GetModuleHandle(NULL));

namespace Addresses {
	using luavm_load = uintptr_t(__fastcall*)(uintptr_t rl, std::string* source, const char* chunk, int env);
	luavm_load r_luavm_load = (luavm_load)(base + 0x356B40);

	using task_defer = uintptr_t(__cdecl*)(uintptr_t rl);
	task_defer r_taskdefer = (task_defer)(base + 0x3DC560);

	using getscheduler = uintptr_t(__cdecl*)();
	getscheduler r_getscheduler = (getscheduler)(base + 0x7320B0);

	using print = uintptr_t(__cdecl*)(int type, const char* source);
	print r_print = (print)(base + 0xCEE9C0);
}

namespace Offsets {
	namespace scriptContext {
		uintptr_t luastate(uintptr_t sc) {
			return *reinterpret_cast<uintptr_t*>(sc + 244) ^ (sc + 244);
		}
	}
	namespace gch {
		const uintptr_t marked = 0;
		const uintptr_t tt = 1;
		const uintptr_t memcat = 2;
	}
	namespace lua_State {
		const uintptr_t top = 12;
		const uintptr_t extraSpace = 72;
		const uintptr_t activememcat = 4;
		const uintptr_t env = 60;

		void incrementTop(uintptr_t rl)
		{
			*reinterpret_cast<uintptr_t*>(rl + Offsets::lua_State::top) += 16;
		}

		void decrementTop(uintptr_t rl)
		{
			*reinterpret_cast<uintptr_t*>(rl + Offsets::lua_State::top) -= 16;
		}
	}
	namespace extra_Space {
		const uintptr_t identity = 24;
	}
	namespace global_State {
		const uintptr_t frealloc = 12;
		const uintptr_t userdata = 16;// ud
		const uintptr_t currentwhite = 20;
		const uintptr_t totalbytes = 52;
		const uintptr_t memcatbytes = 320;

		uintptr_t global(uintptr_t rl) {
			return *reinterpret_cast<uintptr_t*>(rl + 8) - (rl + 8);
		}
	}
	namespace Closure {
		const uintptr_t isC = 3;
		const uintptr_t env = 12;
		namespace C {
			const uintptr_t upvals = 32;

			void set_function(uintptr_t rl, uintptr_t closure, uintptr_t fn) {
				*reinterpret_cast<uintptr_t*>(closure + 16) = closure + fn + 16;
			}

			void set_continuation(uintptr_t rl, uintptr_t closure, uintptr_t continuation) {
				*reinterpret_cast<uintptr_t*>(closure + 20) = closure + continuation + 20;
			}

			void set_debugname(uintptr_t rl, uintptr_t closure, const char* debugname) {
				*reinterpret_cast<uintptr_t*>(closure + 24) = reinterpret_cast<uintptr_t>(debugname) - (closure + 24);
			}
		}
	}
	namespace TString {
	}
	namespace lua_Page {
	}
}